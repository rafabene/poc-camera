# Makefile para POC Camera - Object Detection

.PHONY: all build clean run help

# Configura√ß√µes
BINARY_NAME=poc-camera
MAIN_FILES=*.go

# Detecta o sistema operacional
UNAME_S := $(shell uname -s)

# Flags espec√≠ficas para macOS
ifeq ($(UNAME_S),Darwin)
    BUILD_FLAGS=-ldflags="-s -w" -tags=opencv4
    CGO_LDFLAGS=-framework CoreFoundation -framework AVFoundation -framework QuartzCore
else
    BUILD_FLAGS=-ldflags="-s -w"
    CGO_LDFLAGS=
endif

# Comandos principais
all: build

build:
	@echo "üî® Compilando $(BINARY_NAME)..."
	CGO_LDFLAGS="$(CGO_LDFLAGS)" go build $(BUILD_FLAGS) -o $(BINARY_NAME) $(MAIN_FILES)
	@echo "‚úÖ Build conclu√≠do: $(BINARY_NAME)"

run: build
	@echo "üöÄ Executando detec√ß√£o de objetos..."
	./$(BINARY_NAME)

clean:
	@echo "üßπ Limpando arquivos..."
	rm -f $(BINARY_NAME)
	rm -f *.log
	@echo "‚úÖ Limpeza conclu√≠da"


install-deps:
	@echo "üì¶ Instalando depend√™ncias..."
	go mod tidy
	@echo "‚úÖ Depend√™ncias instaladas"

test:
	@echo "üìπ Testando aplica√ß√£o..."
	go run config/*.go *.go

help:
	@echo "üîç POC Camera - Object Detection"
	@echo "===============================\n"
	@echo "Comandos dispon√≠veis:"
	@echo "  make build        - Compila o projeto"
	@echo "  make run          - Executa detec√ß√£o de objetos"
	@echo "  make clean        - Remove arquivos gerados"
	@echo "  make install-deps - Instala depend√™ncias"
	@echo "  make test         - Testa a aplica√ß√£o"
	@echo "  make help         - Mostra esta ajuda\n"
	@echo "Exemplo:"
	@echo "  make run          # Inicia detector de objetos"

# Target para desenvolvimento
dev-build:
	@echo "üîß Build de desenvolvimento..."
	go build -race $(BUILD_FLAGS) -o $(BINARY_NAME)-dev $(MAIN_FILES)

